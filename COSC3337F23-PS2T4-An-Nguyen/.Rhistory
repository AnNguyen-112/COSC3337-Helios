library(readr)
RBWD_ALL <- read_csv("Basel_Weather.csv")
View(RBWD_ALL)
RBWD<- RBWD_ALL[, c("DATE", "precipitation", "sunshine", "temp_mean", "humidity")]
View(RBWD_ALL)
View(RBWD)
View(RBWD)
View(RBWD_ALL)
install.packages("DDoutlier") # for LDOF distance
library(DDoutlier)
library(readr)
#a
precipitation_outlier_score <- MLDOF(dataset = rbwd_subset$precipitation, k = 10)
#a
precipitation_outlier_score <- LDOF(dataset = rbwd_subset$precipitation, k = 10)
#a
precipitation_outlier_score <- LDOF(dataset = RBWD$precipitation, k = 10)
sum(is.na(RBWD$precipitation))
#a
precipitation_outlier_score <- LDOF(dataset = RBWD$precipitation, k = 5)
#a
precipitation_outlier_score <- LDOF(dataset = RBWD, k = 10)
#create a new dataset that include each new OLS column add
RBWD_with_OLS_precipitation <- cbind(rbwd, OLS = precipitation_outlier_score)
#create a new dataset that include each new OLS column add
RBWD_with_OLS_precipitation <- cbind(RBWD, OLS = precipitation_outlier_score)
View(RBWD_with_OLS_precipitation)
#a
precipitation_outlier_score <- LDOF(dataset = RBWD, k = 10)
#create a new dataset that include each new OLS column add
RBWD_with_OLS_precipitation <- cbind(RBWD, OLS = precipitation_outlier_score)
precipitation_outlier_score <- LDOF(dataset = RBWD$precipitation, k = 10)
#a
precipitation_outlier_score <- LDOF(dataset = RBWD[,-1], k = 10)
#create a new dataset that include each new OLS column add
RBWD_with_OLS_precipitation <- cbind(RBWD, OLS = precipitation_outlier_score)
scaled_RBWD <- scale(RBWD[,-1])
View(scaled_RBWD)
scaled_RBWD <- cbind(RBWD$DATE,scale(RBWD[,-1]))
precipitation_outlier_score <- LDOF(dataset = scaled_RBWD[,-1], k = 10)
scaled_RBWD <- cbind(RBWD$DATE,scale(RBWD[,-1]))
# Set the number of folds for cross-validation
num_folds <- 5  # Adjust based on your preference
# Perform cross-validation
set.seed(123)  # Set seed for reproducibility
cv_results <- lapply(1:num_folds, function(fold) {
# Split the data into training and testing sets
indices <- sample(1:nrow(RBWD), size = floor(nrow(RBWD)/num_folds))
train_data <- scaled_rbwd_subset[-indices, ]
test_data <- scaled_rbwd_subset[indices, ]
# Use LDOF for outlier detection based on scaled precipitation
precipitation_outlier_score <- LDOF(dataset = scaled_RBWD[,-1], k = 10)
# Return the results for this fold
list(scores = precipitation_outlier_score)
})
scaled_RBWD <- cbind(RBWD$DATE,scale(RBWD[,-1]))
# Set the number of folds for cross-validation
num_folds <- 5  # Adjust based on your preference
# Perform cross-validation
set.seed(123)  # Set seed for reproducibility
cv_results <- lapply(1:num_folds, function(fold) {
# Split the data into training and testing sets
indices <- sample(1:nrow(RBWD), size = floor(nrow(RBWD)/num_folds))
train_data <- scaled_RBWD[-indices, ]
test_data <- scaled_RBWD[indices, ]
# Use LDOF for outlier detection based on scaled precipitation
precipitation_outlier_score <- LDOF(dataset = scaled_RBWD[,-1], k = 10)
# Return the results for this fold
list(scores = precipitation_outlier_score)
})
# Combine results from all folds
all_test_scores <- do.call(c, lapply(cv_results, function(result) result$scores))
# Create a new dataset with RBWD columns and an additional column for the outlier scores
RBWD_with_OLS_K10 <- cbind(RBWD, OLS = all_test_scores)
View(RBWD_with_OLS_K10)
View(RBWD_with_OLS_K10)
View(RBWD_with_OLS_precipitation)
scaled_RBWD <- cbind(RBWD$DATE,scale(RBWD[,-1]))
precipitation_outlier_score <- LDOF(dataset = scaled_RBWD[,-1], k = 10)
#create a new dataset that include each new OLS column add
RBWD_with_OLS_K10 <- cbind(RBWD, OLS = precipitation_outlier_score)
View(RBWD_with_OLS_precipitation)
View(RBWD_with_OLS_K10)
View()
function()
LDOF
check
check()
methods(t)
LDOF
SvECTOR
sVector
#a
scaled_RBWD <- cbind(RBWD$DATE,scale(RBWD[,-1]))
#k = 5
precipitation_outlier_score_5 <- LDOF(dataset = scaled_RBWD[,-1], k = 5)
#create a new dataset that include each new OLS column add
RBWD_with_OLS_K5 <- cbind(RBWD, OLS = precipitation_outlier_score_5)
#k = 10
precipitation_outlier_score <- LDOF(dataset = scaled_RBWD[,-1], k = 10)
#create a new dataset that include each new OLS column add
RBWD_with_OLS_K10 <- cbind(RBWD, OLS = precipitation_outlier_score)
#k = 15
precipitation_outlier_score_15 <- LDOF(dataset = scaled_RBWD[,-1], k = 15)
#create a new dataset that include each new OLS column add
RBWD_with_OLS_K15 <- cbind(RBWD, OLS = precipitation_outlier_score_15)
View(RBWD_with_OLS_K15)
View(RBWD_with_OLS_K5)
View(RBWD_with_OLS_precipitation)
View(RBWD_with_OLS_K10)
LDOF
custom_ldof_function <- function(dataset, k = 5, dist_function = NULL) {
n <- nrow(dataset)
dataset <- as.matrix(dataset)
if (!is.numeric(k)) {
stop("k input must be numeric")
}
if (k >= n || k < 1) {
stop("k input must be less than the number of observations and greater than 0")
}
if (!is.numeric(dataset)) {
stop("dataset input is not numeric")
}
# Use the provided distance function or default to Euclidean distance
if (is.null(dist_function)) {
dist_function <- function(x, y) sqrt(sum((x - y)^2))
}
LDOF <- numeric(n)
for (i in 1:n) {
vector <- dist_function(dataset[i, ], dataset)
sVector <- sort(vector)
np <- as.numeric(names(sVector))[2:(k + 1)]
dxp <- sum(sVector[2:(k + 1)]) / k
Dxp <- sum(dist_function(dataset[np, ], dataset[np, ])) / (k * (k - 1))
LDOF[i] <- dxp / Dxp
}
return(LDOF)
}
# Example usage with Manhattan distance
manhattan_distance <- function(x, y) sum(abs(x - y))
#a
custom_ldof_function <- function(dataset, k = 5, dist_function = NULL) {
n <- nrow(dataset)
dataset <- as.matrix(dataset)
if (!is.numeric(k)) {
stop("k input must be numeric")
}
if (k >= n || k < 1) {
stop("k input must be less than the number of observations and greater than 0")
}
if (!is.numeric(dataset)) {
stop("dataset input is not numeric")
}
# Use the provided distance function or default to Euclidean distance
if (is.null(dist_function)) {
dist_function <- function(x, y) sqrt(sum((x - y)^2))
}
LDOF <- numeric(n)
for (i in 1:n) {
vector <- dist_function(dataset[i, ], dataset)
sVector <- sort(vector)
np <- as.numeric(names(sVector))[2:(k + 1)]
dxp <- sum(sVector[2:(k + 1)]) / k
Dxp <- sum(dist_function(dataset[np, ], dataset[np, ])) / (k * (k - 1))
LDOF[i] <- dxp / Dxp
}
return(LDOF)
}
precipitation_outlier_score_5 <- custom_ldof_function(dataset = scaled_RBWD[,-1], k = 5)
precipitation_outlier_score_5
custom_ldof_function <- function(dataset, k = 5, dist_function = NULL) {
n <- nrow(dataset)
dataset <- as.matrix(dataset)
if (!is.numeric(k)) {
stop("k input must be numeric")
}
if (k >= n || k < 1) {
stop("k input must be less than the number of observations and greater than 0")
}
if (!is.numeric(dataset)) {
stop("dataset input is not numeric")
}
# Use the provided distance function or default to Euclidean distance
if (is.null(dist_function)) {
dist_function <- function(x, y) sqrt(sum((x - y)^2))
}
LDOF <- numeric(n)
for (i in 1:n) {
vector <- dist_function(dataset[i, ], dataset)
sVector <- sort(vector)
np <- as.numeric(names(sVector))[2:(k + 1)]
dxp <- sum(sVector[2:(k + 1)]) / k
Dxp <- sum(dist_function(dataset[np, ], dataset[i, ])) / k
LDOF[i] <- dxp / Dxp
}
return(LDOF)
}
precipitation_outlier_score_5
precipitation_outlier_score_5 <- custom_ldof_function(dataset = scaled_RBWD[,-1], k = 5)
precipitation_outlier_score_5
precipitation_outlier_score_5 <- LDOF(dataset = scaled_RBWD[,-1], k = 5)
#k = 100
precipitation_outlier_score_100 <- LDOF(dataset = scaled_RBWD[,-1], k = 100)
#create a new dataset that include each new OLS column add
RBWD_with_OLS_K100 <- cbind(RBWD, OLS = precipitation_outlier_score_100)
View(RBWD_with_OLS_precipitation)
View(RBWD_with_OLS_K5)
View(RBWD_with_OLS_K15)
View(RBWD_with_OLS_K100)
View(RBWD_with_OLS_K15)
View(RBWD_with_OLS_precipitation)
View(RBWD_with_OLS_K10)
View(RBWD)
View(RBWD)
#k = 20
precipitation_outlier_score_20 <- LDOF(dataset = scaled_RBWD[,-1], k = 20)
#create a new dataset that include each new OLS column add
RBWD_with_OLS_K100 <- cbind(RBWD, OLS = precipitation_outlier_score_20)
View(RBWD_with_OLS_K10)
View(RBWD_with_OLS_K100)
View(RBWD_with_OLS_K15)
View(RBWD_with_OLS_K5)
View(RBWD_with_OLS_precipitation)
#k = 20
precipitation_outlier_score_20 <- LDOF(dataset = scaled_RBWD[,-1], k = 20)
#create a new dataset that include each new OLS column add
RBWD_with_OLS_K20 <- cbind(RBWD, OLS = precipitation_outlier_score_20)
View(RBWD_with_OLS_precipitation)
View(RBWD_with_OLS_K5)
View(RBWD_with_OLS_K20)
# Find the highest value in each column
max_values <- apply(RBWD[, -1], 2, max)
# Find the lowest value in each column
min_values <- apply(RBWD[, -1], 2, min)
# Print or view the results
cat("Highest values in each column:\n")
print(max_values)
cat("\nLowest values in each column:\n")
print(min_values)
View(RBWD_ALL)
View(RBWD_with_OLS_K10)
